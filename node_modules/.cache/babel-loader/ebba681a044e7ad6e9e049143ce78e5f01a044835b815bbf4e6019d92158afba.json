{"ast":null,"code":"// // parseData.js\n\n// import React, { useState } from 'react';\n// import { ubuntuIP } from '../../Components/constantVariable';\n// import './parseData.css'; // Import your CSS file for styling\n\n// const ParseData = ({ rowData, s_imei_no, onClose }) => {\n//   const [formData, setFormData] = useState(rowData.s_raw_pkt);\n//   const [packetType, setPacketType] = useState('');\n//   const [fetchedData, setFetchedData] = useState([]);\n//   const [fetchAttempted, setFetchAttempted] = useState(false);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const queryString = `?i_imei_no=${s_imei_no}&deviceId=${packetType}&s_raw_pkt=${formData}`;\n//     fetch(`${ubuntuIP}/api/v0/getParsedData${queryString}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         setFetchedData(data.data);\n//         console.log(\"fetched data\", data.data);\n//         alert('Data fetched successfully!')\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//         alert('Error! Please try again.');\n//       })\n//       .finally(() => {\n//         setFetchAttempted(true); // Set fetchAttempted to true after fetch attempt\n//       });\n//   };\n\n//   return (\n//     <div className=\"modal modal-small\">\n//       <div className=\"modal-content\">\n//         <select value={packetType} onChange={(e) => setPacketType(e.target.value)}>\n//           <option value=\"\">Select Packet Type</option>\n//           <option value=\"Rudra\">Rudra</option>\n//           <option value=\"NVR\">NVR</option>\n//         </select>\n//         <input type=\"text\" value={formData} onChange={(e) => setFormData(e.target.value)} />\n//         <button onClick={handleSubmit}>Submit</button>\n//         <div className=\"table-container\">\n//           {(fetchAttempted && Object.keys(fetchedData).length === 0) ? (\n//             <p>Parsed data is not available.</p>\n//           ) : (\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(fetchedData).map((key, index) => (\n//                     <th key={index}>{key}</th>\n//                   ))}\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 <tr>\n//                   {Object.values(fetchedData).map((value, index) => (\n//                     <td key={index}>{typeof value === 'object' ? JSON.stringify(value) : value}</td>\n//                   ))}\n//                 </tr>\n//               </tbody>\n//             </table>\n//           )}\n//         </div>\n//         <button onClick={onClose}>Close</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ParseData;","map":{"version":3,"names":[],"sources":["/home/rajdeep/RAJDEEP/researchContent/VTS/VTS-Frontend/vts-frontend/frontend/src/Components/serviceDataLog/parseData.js"],"sourcesContent":["// // parseData.js\n\n// import React, { useState } from 'react';\n// import { ubuntuIP } from '../../Components/constantVariable';\n// import './parseData.css'; // Import your CSS file for styling\n\n// const ParseData = ({ rowData, s_imei_no, onClose }) => {\n//   const [formData, setFormData] = useState(rowData.s_raw_pkt);\n//   const [packetType, setPacketType] = useState('');\n//   const [fetchedData, setFetchedData] = useState([]);\n//   const [fetchAttempted, setFetchAttempted] = useState(false);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const queryString = `?i_imei_no=${s_imei_no}&deviceId=${packetType}&s_raw_pkt=${formData}`;\n//     fetch(`${ubuntuIP}/api/v0/getParsedData${queryString}`, {\n//       method: 'GET',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       }\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         setFetchedData(data.data);\n//         console.log(\"fetched data\", data.data);\n//         alert('Data fetched successfully!')\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//         alert('Error! Please try again.');\n//       })\n//       .finally(() => {\n//         setFetchAttempted(true); // Set fetchAttempted to true after fetch attempt\n//       });\n//   };\n\n//   return (\n//     <div className=\"modal modal-small\">\n//       <div className=\"modal-content\">\n//         <select value={packetType} onChange={(e) => setPacketType(e.target.value)}>\n//           <option value=\"\">Select Packet Type</option>\n//           <option value=\"Rudra\">Rudra</option>\n//           <option value=\"NVR\">NVR</option>\n//         </select>\n//         <input type=\"text\" value={formData} onChange={(e) => setFormData(e.target.value)} />\n//         <button onClick={handleSubmit}>Submit</button>\n//         <div className=\"table-container\">\n//           {(fetchAttempted && Object.keys(fetchedData).length === 0) ? (\n//             <p>Parsed data is not available.</p>\n//           ) : (\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(fetchedData).map((key, index) => (\n//                     <th key={index}>{key}</th>\n//                   ))}\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 <tr>\n//                   {Object.values(fetchedData).map((value, index) => (\n//                     <td key={index}>{typeof value === 'object' ? JSON.stringify(value) : value}</td>\n//                   ))}\n//                 </tr>\n//               </tbody>\n//             </table>\n//           )}\n//         </div>\n//         <button onClick={onClose}>Close</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ParseData;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}