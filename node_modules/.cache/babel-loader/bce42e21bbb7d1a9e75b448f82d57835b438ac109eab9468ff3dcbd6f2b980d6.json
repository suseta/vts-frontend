{"ast":null,"code":"var _jsxFileName = \"/home/rajdeep/RAJDEEP/researchContent/VTS/VTS-Frontend/vts-frontend/frontend/src/Components/data/data.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './data.css';\nimport { ubuntuIP } from '../../Components/constantVariable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet JsonToExcelForm = () => {\n  _s();\n  let initialState = {\n    dataDate: ''\n  };\n  let [dateForInfo, setDateForInfo] = useState({\n    dataDate: ''\n  });\n  let resetForm = () => {\n    setDateForInfo(initialState);\n  };\n  let refreshPage = () => {\n    window.location.reload();\n  };\n  let handleChange = e => {\n    let {\n      name,\n      value\n    } = e.target;\n    setDateForInfo(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n\n  // Define a function to handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    fetch(`${ubuntuIP}/api/v0/generateExcel?dataDate=${dateForInfo.dataDate}`).then(response => {\n      // Check if response is successful\n      if (!response.ok) {\n        // throw new Error('Network response was not ok');\n        alert(\"Data for the Provided Date is not available\");\n      }\n      // Return the response body as blob\n      return response.blob();\n    }).then(blob => {\n      // Create a temporary URL for the blob\n      const url = window.URL.createObjectURL(new Blob([blob]));\n      // Create a link element\n      const link = document.createElement('a');\n      link.href = url;\n      // Specify the file name for the download\n      link.setAttribute('download', `data_${dateForInfo.dataDate}.xlsx`);\n      // Append the link to the body\n      document.body.appendChild(link);\n      // Trigger the download\n      link.click();\n      // Clean up: remove the link and revoke the URL\n      link.parentNode.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    }).catch(error => {\n      console.error('Error: ', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" Fetch DATA In Excel Format\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DataJsonToExcel\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"dataDate\",\n                children: \"Fetch Data for the Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                id: \"dataDate\",\n                name: \"dataDate\",\n                value: dateForInfo.dataDate,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"form-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"cancel-button\",\n                onClick: () => {\n                  resetForm();\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"refresh-button\",\n                onClick: refreshPage,\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(JsonToExcelForm, \"ZR/3ltopL6VODkXvd7SDuvbnpLM=\");\n_c = JsonToExcelForm;\nexport default JsonToExcelForm;\nvar _c;\n$RefreshReg$(_c, \"JsonToExcelForm\");","map":{"version":3,"names":["React","useState","ubuntuIP","jsxDEV","_jsxDEV","JsonToExcelForm","_s","initialState","dataDate","dateForInfo","setDateForInfo","resetForm","refreshPage","window","location","reload","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","fetch","then","response","ok","alert","blob","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","revokeObjectURL","catch","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","class","onClick","_c","$RefreshReg$"],"sources":["/home/rajdeep/RAJDEEP/researchContent/VTS/VTS-Frontend/vts-frontend/frontend/src/Components/data/data.js"],"sourcesContent":["import React, { useState } from 'react'\nimport './data.css'\n\nimport { ubuntuIP } from '../../Components/constantVariable'\n\nlet JsonToExcelForm = () => {\n\n    let initialState = {\n        dataDate: ''\n    }\n\n    let [dateForInfo, setDateForInfo] = useState({\n        dataDate: ''\n    })\n\n    let resetForm = () => {\n        setDateForInfo(initialState)\n    }\n\n    let refreshPage = () => {\n        window.location.reload()\n    }\n\n    let handleChange = e => {\n        let { name, value } = e.target\n        setDateForInfo(prevData => ({ ...prevData, [name]: value }))\n    }\n\n    // Define a function to handle form submission\nconst handleSubmit = async (e) => {\n    e.preventDefault();\n    fetch(`${ubuntuIP}/api/v0/generateExcel?dataDate=${dateForInfo.dataDate}`)\n        .then(response => {\n            // Check if response is successful\n            if (!response.ok) {\n                // throw new Error('Network response was not ok');\n                alert(\"Data for the Provided Date is not available\")\n                \n            }\n            // Return the response body as blob\n            return response.blob();\n        })\n        .then(blob => {\n            // Create a temporary URL for the blob\n            const url = window.URL.createObjectURL(new Blob([blob]));\n            // Create a link element\n            const link = document.createElement('a');\n            link.href = url;\n            // Specify the file name for the download\n            link.setAttribute('download', `data_${dateForInfo.dataDate}.xlsx`);\n            // Append the link to the body\n            document.body.appendChild(link);\n            // Trigger the download\n            link.click();\n            // Clean up: remove the link and revoke the URL\n            link.parentNode.removeChild(link);\n            window.URL.revokeObjectURL(url);\n        })\n        .catch(error => {\n            console.error('Error: ', error);\n        });\n}\n\n\n    return (\n        <div>\n            <div className='wrapper'>\n                <div className='container'>\n                    <h2> Fetch DATA In Excel Format</h2>\n                    <div className='DataJsonToExcel'>\n                        <form onSubmit={handleSubmit}>\n                            <div className='form-group'>\n                                <label htmlFor='dataDate'>Fetch Data for the Date:</label>\n                                <input\n                                    type='date'\n                                    id='dataDate'\n                                    name='dataDate'\n                                    value={dateForInfo.dataDate}\n                                    onChange={handleChange}\n                                />\n                            </div>\n                            <div class='form-buttons'>\n                                <button type='submit'>Save</button>\n                                <button\n                                    type='button'\n                                    className='cancel-button'\n                                    onClick={() => {\n                                        resetForm()\n                                    }}\n                                >\n                                    Cancel\n                                </button>\n                                <button\n                                    type='button'\n                                    className='refresh-button'\n                                    onClick={refreshPage}\n                                >\n                                    Refresh\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default JsonToExcelForm\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}